import React, { useContext, useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import image from '../assets/images.jpeg';
import API from '../utils/axios';
import { AuthContext } from '../context/AuthContext';

const About = () => {
  const { user } = useContext(AuthContext);
  const [message, setMessage] = useState('');
  const [status, setStatus] = useState('');
  const [loading, setLoading] = useState(false);

  const [feedbacks, setFeedbacks] = useState([]);
  const [loadingFeedbacks, setLoadingFeedbacks] = useState(true);

  const aboutData = {
    description: `‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡§Ç‡§°‡§≤ ‡§è‡§ï ‡§∏‡§Ç‡§ó‡§†‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§ó‡§†‡§® ‡§π‡•à, ‡§ú‡•ã ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§π‡§ø‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ï‡•ç‡§∑‡§æ, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§â‡§§‡•ç‡§§‡§∞‡§¶‡§æ‡§Ø‡§ø‡§§‡•ç‡§µ ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§¶‡•ç‡§ß ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§ù‡§æ ‡§Æ‡§Ç‡§ö ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§∏‡•á ‡§µ‡•á ‡§è‡§ï‡§ú‡•Å‡§ü ‡§π‡•ã‡§ï‡§∞ ‡§Ö‡§™‡§®‡•á ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§Æ‡§æ‡§ú ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡•á ‡§∏‡§ï‡•á‡§Ç‡•§`,
    mission: `‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§π‡§ø‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡§®‡§æ, ‡§∏‡§Ç‡§ó‡§†‡§ø‡§§ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§≤‡§æ‡§®‡§æ, ‡§î‡§∞ ‡§õ‡•ã‡§ü‡•á ‡§è‡§µ‡§Ç ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ‡•§`,
    vision: `‡§è‡§ï ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤, ‡§∏‡§Ç‡§ó‡§†‡§ø‡§§ ‡§î‡§∞ ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡•Ä ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ï‡§∞‡§®‡§æ ‡§ú‡•ã ‡§Ü‡§§‡•ç‡§Æ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞ ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§¶‡§ø‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§Ö‡§ó‡•ç‡§∞‡§∏‡§∞ ‡§π‡•ã‡•§`,
  };

  useEffect(() => {
    const fetchFeedbacks = async () => {
      try {
        const res = await API.get('/feedback');
        setFeedbacks(res.data);
      } catch (err) {
        console.error('Failed to fetch feedbacks:', err);
      } finally {
        setLoadingFeedbacks(false);
      }
    };
    fetchFeedbacks();
  }, []);

  const handleFeedbackSubmit = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;

    setLoading(true);
    setStatus('');
    try {
      const res = await API.post('/feedback', { message });
      setStatus('‚úÖ Feedback sent successfully.');
      setMessage('');
      setFeedbacks(prev => [res.data.newFeedback, ...prev]);
    } catch (err) {
      setStatus('‚ùå Error sending feedback.');
      console.error('Feedback error:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white text-gray-800 py-10 px-4 md:px-20">
      <motion.h1
        initial={{ y: -40, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="text-4xl md:text-5xl font-bold text-center text-blue-700 mb-12"
      >
        About Us
      </motion.h1>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3 }}
        className="grid md:grid-cols-2 gap-10 items-center bg-white rounded-2xl shadow-xl p-6 md:p-10"
      >
        {/* Left: Image */}
        <div className="flex justify-center">
          <img
            src={image}
            alt="Vyapaar Mandal"
            className="w-full max-w-md rounded-xl shadow-md border"
          />
        </div>

        {/* Right: Text in Hindi */}
        <div className="space-y-6">
          <p className="text-lg md:text-xl leading-8 text-gray-700 whitespace-pre-line font-serif">
            {aboutData.description}
          </p>

          <div>
            <h2 className="text-2xl font-semibold text-blue-600 mb-2">üéØ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø</h2>
            <p className="text-base leading-relaxed font-serif">{aboutData.mission}</p>
          </div>

          <div>
            <h2 className="text-2xl font-semibold text-blue-600 mb-2">üëÅÔ∏è ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø</h2>
            <p className="text-base leading-relaxed font-serif">{aboutData.vision}</p>
          </div>
        </div>
      </motion.div>

      {/* Feedbacks Display */}
      <div className="max-w-3xl mx-auto mt-12">
        <h3 className="text-3xl font-semibold mb-6 text-center text-blue-700">Received Feedbacks</h3>
        {loadingFeedbacks ? (
          <p className="text-center text-gray-500">Loading feedbacks...</p>
        ) : feedbacks.length === 0 ? (
          <p className="text-center text-gray-500">No feedback found.</p>
        ) : (
          feedbacks.map((fb) => (
            <div
              key={fb._id}
              className="mb-5 p-5 bg-white rounded-xl shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300"
            >
              <p className="text-gray-800 mb-3 leading-relaxed">{fb.message}</p>
              <div className="text-sm text-gray-500 italic">
                By: <span className="font-medium">{fb.submittedBy?.name || 'Unknown'}</span> |{' '}
                {new Date(fb.createdAt).toLocaleDateString()}
              </div>
            </div>
          ))
        )}
      </div>

      {/* Feedback Form */}
      {user && (
        <div className="mt-12 max-w-2xl mx-auto bg-white rounded-lg shadow p-6">
          <h3 className="text-2xl font-semibold text-blue-700 mb-4 text-center">
            Give us your Feedback üìù
          </h3>
          {status && (
            <div
              className={`mb-4 text-center font-medium ${
                status.startsWith('‚úÖ') ? 'text-green-600' : 'text-red-600'
              }`}
            >
              {status}
            </div>
          )}
          <form onSubmit={handleFeedbackSubmit}>
            <textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              rows={4}
              placeholder="Write your feedback here..."
              className="w-full border rounded px-4 py-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
              required
            ></textarea>
            <button
              type="submit"
              disabled={loading}
              className="mt-4 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded transition"
            >
              {loading ? 'Sending...' : 'Send Feedback'}
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default About;
